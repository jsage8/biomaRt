%\VignetteIndexEntry{The biomaRt users guide}
%\VignetteDepends{biomaRt}
%\VignetteKeywords{Annotation}
%\VignettePackage{biomaRt}
\documentclass[11pt]{article}
\usepackage{hyperref}
\usepackage{url}
\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}

\author{Steffen Durinck\footnote{durincks@gene.com}, Wolfgang Huber\footnote{huber@ebi.ac.uk}}
\begin{document}
\title{The biomaRt user's guide}

\maketitle

\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

In recent years a wealth of biological data has become available in public data repositories. Easy access to these valuable data resources and firm integration with data analysis is needed for comprehensive bioinformatics data analysis.  The \Rpackage{biomaRt} package,  provides an interface to a growing collection of databases implementing the BioMart software suite (\url{http://www.biomart.org}). The package enables retrieval of large amounts of data in a uniform way without the need to know the underlying database schemas or write complex SQL queries. Examples of BioMart databases are Ensembl, Uniprot and HapMap. These major databases give biomaRt users direct access to a diverse set of data and enable a wide range of powerful online queries from R.

\section{Selecting a BioMart database and dataset}

Every analysis with \Rpackage{biomaRt} starts with selecting a BioMart database to use.  A first step is to check which BioMart web services are available.  The function \Rfunction{listMarts} will display all available BioMart web services   

<<annotate,echo=FALSE>>=
## library("annotate")
options(width=120)
@

\begin{scriptsize}
<<biomaRt>>=
library("biomaRt")
listMarts()
@
\end{scriptsize}

Note: if the function \Rfunction{useMart} runs into proxy problems you should set your proxy first before calling any biomaRt functions.  
You can do this using the Sys.putenv command:

\begin{verbatim}
Sys.putenv("http\_proxy" = "http://my.proxy.org:9999")
\end{verbatim}

Some users have reported that the workaround above does not work, in this case an alternative proxy solution below can be tried: 

\begin{verbatim}
options(RCurlOptions = list(proxy="uscache.kcc.com:80",proxyuserpwd="------:-------"))
\end{verbatim}

The \Rfunction{useMart} function can now be used to connect to a specified BioMart database, this must be a valid name given by \Rfunction{listMarts}. In the next example we choose to query the Ensembl BioMart database.

<<ensembl1>>=
ensembl=useMart("ensembl")
@

BioMart databases can contain several datasets, for Ensembl every species is a different dataset.  In a next step we look at which datasets are available in the selected BioMart by using the function \Rfunction{listDatasets}.

\begin{scriptsize}
<<listDatasets>>=
listDatasets(ensembl)
@
\end{scriptsize}

To select a dataset we can update the \Robject{Mart} object using the function \Rfunction{useDataset}.  In the example below we choose to use the hsapiens dataset.

\begin{verbatim}
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
\end{verbatim}

Or alternatively if the dataset one wants to use is known in advance, we can select a BioMart database and dataset in one step by:

<<ensembl2>>=
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
@

\section{How to build a biomaRt query}

The \Rfunction{getBM} function has three arguments that need to be introduced: filters, attributes and values.
\textit{Filters} define a restriction on the query.  For example you want to restrict the output to all genes located on the human X chromosome then the filter \textit{chromosome\_name} can be used with value 'X'. The \Rfunction{listFilters} function shows you all available filters in the selected dataset.\\

<<filters>>=
filters = listFilters(ensembl)
filters[1:5,]
@ 

\textit{Attributes} define the values we are interested in to retrieve.  For example we want to retrieve the gene symbols or chromosomal coordinates.  The listAttributes function displays all available attributes in the selected dataset.\\

<<attributes>>=
attributes = listAttributes(ensembl)
attributes[1:5,]
@

The \Rfunction{getBM} function is the main query function in biomaRt.  It has four main arguments:\\
\begin{itemize}
\item attributes:  is a vector of attributes that one wants to retrieve (= the output of the query).
\item filters:  is a vector of filters that one wil use as input to the query.
\item values: a vector of values for the filters.  In case multple filters are in use, the values argument requires a list of values where each position in the list corresponds to the position of the filters in the filters argument (see examples below).
\item mart: is and object of class \Robject{Mart}, which is created by the \Rfunction{useMart} function.
\end{itemize}

Note: for some frequently used queries to Ensembl, wrapper 
functions are available: \Rfunction{getGene} and \Rfunction{getSequence}.  
These functions call the \Rfunction{getBM} function with hard coded 
filter and attribute names.

Now that we selected a BioMart database and dataset, and know about attributes, filters, and the values for filters; we can build a biomaRt query.  Let's make an easy query for the following problem:  We have a list of Affymetrix identifiers from the u133plus2 platform and we want to retrieve the corresponding EntrezGene identifiers using the Ensembl mappings.

The u133plus2 platform will be the filter for this query and as values for this filter we use our list of Affymetrix identifiers.  As output (attributes) for the query we want to retrieve the EntrezGene and u133plus2 identifiers so we get a mapping of these two identifiers as a result.  The exact names that we will have to use to specify the attributes and filters can be retrieved with the \Rfunction{listAttributes} and \Rfunction{listFilters} function respectively.  Let's now run the query:

\begin{scriptsize}
<<echo=TRUE,eval=FALSE>>=
affyids=c("202763_at","209310_s_at","207500_at")
getBM(attributes=c('affy_hg_u133_plus_2', 'entrezgene'), filters = 'affy_hg_u133_plus_2', values = affyids, mart = ensembl)
@  
\begin{verbatim}
  affy_hg_u133_plus_2 entrezgene
1         209310_s_at        837
2           207500_at        838
3           202763_at        836
\end{verbatim}
\end{scriptsize}

\section{Examples of biomaRt queries}

In the sections below a variety of example queries are described.  Every example is written as a task, and we have to come up with a biomaRt solution to the problem.

\subsection{Task 1:  Annotate a set of Affymetrix identifiers with HUGO symbol and chromosomal locations of corresponding genes}

We have a list of Affymetrix hgu133plus2 identifiers and we would like to retrieve the HUGO gene symbols, chromosome names, start and end positions and the bands of the corresponding genes.  The \Rfunction{listAttributes} and the \Rfunction{listFilters} functions give us an overview of the available attributes and filters and we look in those lists to find the corresponding attribute and filter names we need.  For this query we'll need the following attributes: hgnc\_symbol, chromsome\_name, start\_position, end\_position, band and affy\_hg\_u133\_plus\_2 (as we want these in the output to provide a mapping with our original Affymetrix input identifiers.  There is one filter in this query which is the affy\_hg\_u133\_plus\_2 filter as we use a list of Affymetrix identifiers as input.  Putting this all together in the \Rfunction{getBM} and performing the query gives: 
\begin{scriptsize}
<<echo=TRUE,eval=FALSE>>=
affyids=c("202763_at","209310_s_at","207500_at")
getBM(attributes=c('affy_hg_u133_plus_2', 'hgnc_symbol', 'chromosome_name','start_position','end_position', 'band'),
 filters = 'affy_hg_u133_plus_2', values = affyids, mart = ensembl)
@ 
\begin{verbatim}
  affy_hg_u133_plus_2 hgnc_symbol chromosome_name start_position end_position  band
1         209310_s_at       CASP4              11      104813593    104840163 q22.3
2           207500_at       CASP5              11      104864962    104893895 q22.3
3           202763_at       CASP3               4      185548850    185570663 q35.1
\end{verbatim}
\end{scriptsize}

\subsection{Task 2:  Annotate a set of EntrezGene identifiers with GO annotation}

In this task we start out with a list of EntrezGene identiers and we want to retrieve GO identifiers related to biological processes that are associated with these entrezgene identifiers.  Again we look at the output of \Rfunction{listAttributes} and \Rfunction{listFilters}  to find the filter and attributes we need.  Then we construct the following query:

\begin{scriptsize}
<<echo=TRUE,eval=FALSE>>=
entrez=c("673","837")
goids = getBM(attributes=c('entrezgene','go_id'), filters='entrezgene', values=entrez, mart=ensembl)
head(goids)
@ 
\begin{verbatim}  
   entrezgene      go_id
1         673 GO:0000186
2         673 GO:0006468
3         673 GO:0006916
4         673 GO:0007264
5         673 GO:0007268

\end{verbatim}
\end{scriptsize}


\subsection{Task 3: Retrieve all HUGO gene symbols of genes that are located on chromosomes 17,20 or Y ,\\ and are associated with one the following GO terms: \\"GO:0051330","GO:0000080","GO:0000114","GO:0000082"\\ (here we'll use more than one filter)}
The \Rfunction{getBM} function enables you to use more than one filter.  In this case  the filter argument should be a vector with the filter names.  The values should be a list, where the first element of the list corresponds to the first filter and the second list element to the second filter and so on.  The elements of this list are vectors containing the possible values for the corresponding filters.
\begin{small}
\begin{verbatim}
 go=c("GO:0051330","GO:0000080","GO:0000114")
 chrom=c(17,20,"Y")
 getBM(attributes= "hgnc_symbol",
        filters=c("go_id","chromosome_name"),
        values=list(go,chrom), mart=ensembl)
\end{verbatim}
\end{small}
\begin{scriptsize}
\begin{verbatim}
  hgnc_symbol
1      E2F1
\end{verbatim}
\end{scriptsize}

\subsection{Task 4:  Annotate set of idenfiers with INTERPRO protein domain identifiers}

In this example we want to annotate the following two RefSeq identifiers: NM\_005359 and NM\_000546 with INTERPRO protein domain identifiers and a description of the protein domains.

<<echo=TRUE,eval=FALSE>>=
refseqids = c("NM_005359","NM_000546")
ipro = getBM(attributes=c("refseq_dna","interpro","interpro_description"), filters="refseq_dna",values=refseqids, mart=ensembl)
@

\begin{scriptsize}
\begin{verbatim}
ipro
  refseq_dna  interpro             interpro_description
1  NM_000546 IPR002117                p53 tumor antigen
2  NM_000546 IPR010991             p53, tetramerisation
3  NM_000546 IPR011615                 p53, DNA-binding
4  NM_000546 IPR013872 p53 transactivation domain (TAD)
5  NM_000546 IPR000694              Proline-rich region
6  NM_005359 IPR001132     MAD homology 2, Dwarfin-type
7  NM_005359 IPR003619     MAD homology 1, Dwarfin-type
8  NM_005359 IPR013019                MAD homology, MH1
\end{verbatim}
\end{scriptsize}

\subsection{Task 5: Select all Affymetrix identifiers on the hgu133plus2 chip and Ensembl gene identifiers for genes located on chromosome 16 between basepair 1100000 and 1250000.}

In this example we will again use multiple filters: chromosome\_name, start, and end as we filter on these three conditions. Note that when a chromosome name, a start position and an end position are jointly used as filters, the BioMart webservice interprets this as return everything from the given chromosome between the given start and end positions.
\begin{scriptsize}
<<>>=
getBM(c('affy_hg_u133_plus_2','ensembl_gene_id'), filters = c('chromosome_name','start','end'),
 values=list(16,1100000,1250000), mart=ensembl)
@
\end{scriptsize}
 
\subsection{Task 6: Retrieve all entrezgene identifiers and HUGO gene symbols of genes which have a "MAP kinase activity" GO term associated with it.}
The GO identifier for MAP kinase activity is GO:0004707.  In our query we will use go as filter and entrezgene and hgnc\_symbol as attributes.  Here's the query:
\begin{scriptsize}
<<echo=TRUE, eval = FALSE>>=
getBM(c('entrezgene','hgnc_symbol'), filters='go', values='GO:0004707', mart=ensembl)
@
\begin{verbatim} 
   entrezgene hgnc_symbol
1        5601       MAPK9
2      225689      MAPK15
3        5599       MAPK8
4        5594       MAPK1
5        6300      MAPK12
\end{verbatim} 
\end{scriptsize}

\subsection{Task 7:  Given a set of EntrezGene identifiers, retrieve 100bp upstream promoter sequences}
 
All sequence related queries to Ensembl are available through the \Rfunction{getSequence} wrapper function. \Rfunction{getBM} can also be used directly to retrieve sequences but this can get complicated so using getSequence is recommended.
Sequences can be retrieved using the \Rfunction{getSequence} function either starting from chromosomal coordinates or identifiers.  The chromosome name can be specified using the \textit{chromosome} argument.  The \textit{start} and \textit{end} arguments are used to specify \textit{start} and \textit{end} positions on the chromosome. The type of sequence returned can be specified by the seqType argument which takes the following values: 'cdna';'peptide' for protein sequences;'3utr' for 3' UTR sequences,'5utr' for 5' UTR sequences; 'gene\_exon' for exon sequences only; 'transcript\_exon' for transcript specific exonic sequences only;'transcript\_exon\_intron' gives the full unspliced transcript, that is exons + introns;'gene\_exon\_intron' gives the exons + introns of a gene;'coding' gives the coding sequence only;'coding\_transcript\_flank' gives the flanking region of the transcript including the UTRs, this must be accompanied with a given value for the upstream or downstream attribute;'coding\_gene\_flank' gives the flanking region of the gene including the UTRs, this must be accompanied with a given value for the upstream or downstream attribute; 'transcript\_flank' gives the flanking region of the transcript exculding the UTRs, this must be accompanied with a given value for the upstream or downstream attribute; 'gene\_flank' gives the flanking region of the gene excluding the UTRs, this must be accompanied with a given value for the upstream or downstream attribute.\\
In MySQL mode the \Rfunction{getSequence} function is more limited and the sequence that is returned is the 5' to 3'+ strand of the genomic sequence, given a chromosome, as start and an end position.\\

Task 4 requires us to retrieve 100bp upstream promoter sequences from a set of EntrzGene identifiers.  The type argument in getSequence can be thought of as the filter in this query and uses the same input names given by \Rfunction{listFilters}. in our query we use entrezgene for the type argument.  Next we have to specify which type of sequences we want to retrieve, here we are interested in the sequences of the promoter region, starting right next to the coding start of the gene.  Setting the seqType to coding\_gene\_flank will give us what we need.  The upstream argument is used to specify how many bp of upstream sequence we want to retrieve, here we'll retrieve a rather short sequence of 100bp.  Putting this all together in getSequence gives:\\

\begin{scriptsize}
<<eval=FALSE>>=
entrez=c("673","7157","837")
getSequence(id = entrez, type="entrezgene",seqType="coding_gene_flank",upstream=100, mart=ensembl) 
@ 
\end{scriptsize}

\subsection{Task 8: Retrieve all 5' UTR sequences of all genes that are located on chromosome 3 between the positions 185514033 and 185535839}

As described in the provious task getSequence can also use chromosomal coordinates to retrieve sequences of all genes that lie in the given region. We also have to specify which type of identifier we want to retrieve together with the sequences, here we choose for entrezgene identifiers.
\begin{scriptsize}
<<echo=TRUE,eval=FALSE>>=
utr5 = getSequence(chromosome=3, start=185514033, end=185535839,
                      type="entrezgene",seqType="5utr", mart=ensembl)
utr5
@ 

\end{scriptsize}
\begin{scriptsize}
\begin{verbatim}
          V1               V2
  .....GAAGCGGTGGC ....   1981
\end{verbatim}
\end{scriptsize}

\subsection{Task 9:  Retrieve protein sequences for a given list of EntrezGene identifiers}

In this task the type argument specifies which type of identifiers we are using.
To get an overview of other valid identifier types we refer to the \Rfunction{listFilters} function.

\begin{scriptsize}
<<echo=TRUE, eval=FALSE>>=
protein = getSequence(id=c(100, 5728),type="entrezgene",
                        seqType="peptide", mart=ensembl)
protein
@ 
\end{scriptsize}
\begin{scriptsize}
\begin{verbatim}
 peptide               entrezgene
 MAQTPAFDKPKVEL ...    100
 MTAIIKEIVSRNKRR ...   5728

\end{verbatim}
\end{scriptsize}


\subsection{Task 10:  Retrieve known SNPs located on the human chromosome 8 between positions 148350 and 148612}

For this example we'll first have to connect to a different BioMart database, namely snp.  
<<echo=TRUE, eval=FALSE>>=
snpmart = useMart("snp", dataset="hsapiens_snp")
@ 

The \Rfunction{listAttributes} and \Rfunction{listFilters} functions give us an overview of the available attributes and filters.  
From these we need: refsnp\_id, allele, chrom\_start and chrom\_strand as attributes; and as filters we'll use: chrom\_start, chrom\_end and chr\_name.  Note that when a chromosome name, a start position and an end position are jointly used as filters, the BioMart webservice interprets this as return everything from the given chromosome between the given start and end positions. Putting our selected attributes and filters into getBM gives:

\begin{scriptsize}
<<eval=FALSE, echo=TRUE>>=
getBM(c('refsnp_id','allele','chrom_start','chrom_strand'), filters = c('chr_name','chrom_start','chrom_end'), values = list(8,148350,148612), mart = snpmart)
@ 
\end{scriptsize}
\begin{scriptsize}
\begin{verbatim}
   refsnp_id allele chrom_start chrom_strand
1   rs1134195    G/T      148394           -1
2   rs4046274    C/A      148394            1
3   rs4046275    A/G      148411            1
4     rs13291    C/T      148462            1
5   rs1134192    G/A      148462           -1
6   rs4046276    C/T      148462            1
7  rs12019378    T/G      148471            1
8   rs1134191    C/T      148499           -1
9   rs4046277    G/A      148499            1
10 rs11136408    G/A      148525            1
11  rs1134190    C/T      148533           -1
12  rs4046278    G/A      148533            1
13  rs1134189    G/A      148535           -1
14  rs3965587    C/T      148535            1
15  rs1134187    G/A      148539           -1
16  rs1134186    T/C      148569            1
17  rs4378731    G/A      148601            1
\end{verbatim}
\end{scriptsize}


\subsection{Task 11:  Given the human gene TP53, retrieve the human chromosomal location of this gene and also retrieve the chromosomal location and RefSeq id of it's homolog in mouse. }

The \Rfunction{getLDS} (Get Linked Dataset) function provides functionality to link 2 BioMart datasets which each other and construct a query over the two datasets.  In Ensembl, linking two datasets translates to retrieving homology data across species.
The usage of getLDS is very similar to \Rfunction{getBM}.  The linked dataset is provided by a separate \Robject{Mart} object and one has to specify filters and attributes for the linked dataset.  Filters can either be applied to both datasets or to one of the datasets.  Use the listFilters and listAttributes functions on both \Robject{Mart} objects to find the filters and attributes for each dataset (species in Ensembl).  The attributes and filters of the linked dataset can be specified with the attributesL and filtersL arguments.   Entering all this information into \Rfunction{getLDS} gives:
\begin{scriptsize}
\begin{verbatim}
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
getLDS(attributes = c("hgnc_symbol","chromosome_name", "start_position"),
       filters = "hgnc_symbol", values = "TP53",mart = human,
      attributesL = c("refseq_dna","chromosome_name","start_position"), martL = mouse)

    V1 V2      V3        V4 V5       V6
1 TP53 17 7512464 NM_011640 11 69396600
\end{verbatim}
\end{scriptsize}

\section{Using archived versions of Ensembl}

It is possible to query archived versions of Ensembl through \Rpackage{biomaRt}.
There are currently two ways to access archived versions.

\subsection{Using the archive=TRUE }
First we list the available Ensembl archives by using the \Rfunction{listMarts} function and setting the archive attribute to TRUE.
Note that not all archives are available this way and it seems that recently this only gives access to few archives if you don't see the version of the archive you need please look at the 2nd way to access archives.
\begin{scriptsize}
<<>>=
listMarts(archive=TRUE)
@ 
\end{scriptsize}
Next we select the archive we want to use using the \Rfunction{useMart} function, again setting the archive attribute to TRUE and giving the full name of the BioMart e.g. ensembl\_mart\_46.

<<echo = TRUE, eval = FALSE>>=
ensembl = useMart("ensembl_mart_46", dataset="hsapiens_gene_ensembl", archive = TRUE)
@ 

If you don't know the dataset you want to use could first connect to the BioMart using \Rfunction{useMart} and then use the \Rfunction{listDatasets} function on this object.
After you selected the BioMart database and dataset, queries can be performed in the same way as when using the current BioMart versions.

\subsection{Accessing archives through specifying the archive host}

Use the \url{http://www.ensembl.org} website and go down the bottom of the page.  Click on 'view in Archive' and select the archive you need.  Copy the url and use that url as shown below to connect to the specified BioMart database.  The example below shows how to query Ensembl 54. 

\begin{scriptsize}
<<<echo = TRUE, eval = FALSE>>=
listMarts(host='may2009.archive.ensembl.org')
ensembl54=useMart(host='may2009.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL')
ensembl54=useMart(host='may2009.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset='hsapiens_gene_ensembl')
@
\end{scriptsize}

\section{Using a BioMart other than Ensembl}

To demonstrate the use of the biomaRt package with non-Ensembl databases the next query is performed using the Wormbase BioMart (WormMart).
We connect to Wormbase, select the gene dataset to use and have a look at the available attributes and filters.  Then we use a list of gene names as filter and retrieve associated RNAi identifiers together with a description of the RNAi phenotype.
\begin{scriptsize}
<<echo=TRUE, eval=FALSE>>=
wormbase=useMart("WS220",dataset="wormbase_gene")
listFilters(wormbase)
listAttributes(wormbase)
getBM(attributes = c("public_name","rnai","rnai_phenotype_phenotype_label"),
                     filters="gene_name", values=c("unc-26","his-33"),
                     mart=wormbase)
     
@
\end{scriptsize}
\begin{scriptsize}
\begin{verbatim}

  public_name           rnai    rnai_phenotype_phenotype_label
1      his-33 WBRNAi00082060                   GRO slow growth
2      his-33 WBRNAi00082060 postembryonic development variant
3      his-33 WBRNAi00082060              EMB embryonic lethal
4      his-33 WBRNAi00082060                 LVL larval lethal
5      his-33 WBRNAi00082060                 LVA larval arrest
6      his-33 WBRNAi00082060          accumulated cell corpses

\end{verbatim}
\end{scriptsize}

\section{biomaRt helper functions}

This section describes a set of biomaRt helper functions that can be used to export FASTA format sequences, retrieve values for certain filters and exploring the available filters and attributes in a more systematic manner. 
\subsection{exportFASTA}

The data.frames obtained by the getSequence function can be exported to FASTA files using the \Rfunction{exportFASTA} function.  One has to specify the data.frame to export and the filename using the file argument.

\subsection{Finding out more information on filters}

\subsubsection{filterType}

Boolean filters need a value TRUE or FALSE in biomaRt.  Setting the value TRUE will include all information that fulfill the filter requirement.  Setting FALSE will exclude the information that fulfills the filter requirement and will return all values that don't fulfill the filter.
For most of the filters, their name indicates if the type is a boolean or not and they will usually start with "with".  However this is not a rule and to make sure you got the type right you can use the function \Rfunction{filterType} to investigate the type of the filter you want to use.

\begin{small}
<<>>=
filterType("with_affy_hg_u133_plus_2",ensembl)
@
\end{small}

\subsubsection{filterOptions}

Some filters have a limited set of values that can be given to them.  To know which values these are one can use the \Rfunction{filterOptions} function to retrieve the predetermed values of the respective filter.

\begin{small}
<<>>=
filterOptions("biotype",ensembl)
@

\end{small}

If there are no predetermed values e.g. for the entrezgene filter, then \Rfunction{filterOptions} will return the type of filter it is. And most of the times the filter name or it's description will suggest what values one case use for the respective filter (e.g. entrezgene filter will work with enterzgene identifiers as values)


\subsection{Attribute Pages}

For large BioMart databases such as Ensembl, the number of attributes displayed by the \Rfunction{listAttributes} function can be very large. 
In BioMart databases, attributes are put together in pages, such as sequences, features, homologs for Ensembl.
An overview of the attributes pages present in the respective BioMart dataset can be obtained with the \Rfunction{attributePages} function.

\begin{small}
<<>>=
pages = attributePages(ensembl)
pages
@
\end{small}

To show us a smaller list of attributes which belog to a specific page, we can now specify this in the \Rfunction{listAttributes} function as follows:

\begin{small}
<<>>=
listAttributes(ensembl, page="feature_page")
@
\end{small}

We now get a short list of attributes related to the region where the genes are located.


\section{Local BioMart databases}

The biomaRt package can be used with a local install of a public BioMart database or a locally developed BioMart database and web service.
In order for biomaRt to recognize the database as a BioMart, make sure that the local database you create has a name conform with \begin{verbatim} database_mart_version \end{verbatim} where database is the name of the database and version is a version number.  No more underscores than the ones showed should be present in this name. A possible name is for example \begin{verbatim} ensemblLocal_mart_46 \end{verbatim}.
\subsection{Minimum requirements for local database installation}
More information on installing a local copy of a BioMart database or develop your own BioMart database and webservice can be found on \url{http://www.biomart.org}
Once the local database is installed you can use biomaRt on this database by:
\begin{scriptsize}
\begin{verbatim}
listMarts(host="www.myLocalHost.org", path="/myPathToWebservice/martservice")
mart=useMart("nameOfMyMart",dataset="nameOfMyDataset",host="www.myLocalHost.org", path="/myPathToWebservice/martservice")
\end{verbatim}
\end{scriptsize}

For more information on how to install a public BioMart database see:  http://www.biomart.org/install.html and follow link databases.

\section{Using \Rfunction{select}}
In order to provide a more consistent interface to all annotations in
Bioconductor the \Rfunction{select}, \Rfunction{columns},
\Rfunction{keytypes} and \Rfunction{keys} have been implemented to wrap
some of the existing functionality above.  These methods can be called
in the same manner that they are used in other parts of the project
except that instead of taking a \Robject{AnnotationDb} derived class
they take instead a \Robject{Mart} derived class as their 1st argument.
Otherwise usage should be essentially the same.  You still use
\Rfunction{columns} to discover things that can be extracted from a
\Robject{Mart}, and \Rfunction{keytypes} to discover which things can be
used as keys with \Rfunction{select}.  

<<columnsAndKeyTypes>>=
mart<-useMart(dataset="hsapiens_gene_ensembl",biomart='ensembl')
head(keytypes(mart), n=3)
head(columns(mart), n=3)
@ 

And you still can use \Rfunction{keys} to extract potential keys, for a
particular key type.  

<<keys1>>=
k = keys(mart, keytype="chromosome_name")
head(k, n=3)
@ 

When using \Rfunction{keys}, you can even take advantage of the extra
arguments that are available for others keys methods.

<<keys2>>=
k = keys(mart, keytype="chromosome_name", pattern="LRG")
head(k, n=3)
@ 

Unfortunately the \Rfunction{keys} method will not work with all key
types because they are not all supported.

But you can still use \Rfunction{select} here to extract columns of data
that match a particular set of keys (this is basically a wrapper for
\Rfunction{getBM}).

<<select>>=
affy=c("202763_at","209310_s_at","207500_at")
select(mart, keys=affy, columns=c('affy_hg_u133_plus_2','entrezgene'),
  keytype='affy_hg_u133_plus_2')
@ 

So why would we want to do this when we already have functions like
\Rfunction{getBM}?  For two reasons: 1) for people who are familiar
with select and it's helper methods, they can now proceed to use
biomaRt making the same kinds of calls that are already familiar to
them and 2) because the select method is implemented in many places
elsewhere, the fact that these methods are shared allows for more
convenient programmatic access of all these resources.  An example of
a package that takes advantage of this is the \Rpackage{OrganismDbi}
package. Where several packages can be accessed as if they were one
resource.




\section{Session Info}
<<>>=
sessionInfo()
warnings()
@
\end{document}
